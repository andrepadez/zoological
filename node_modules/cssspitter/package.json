{
  "name": "cssspitter",
  "version": "0.1.1",
  "description": "Templating engine for CSS based on width and height of the window, used as a Connect/Express Middleware.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": {
    "name": "André Alçada Padez",
    "email": "andre.padez@gmail.com"
  },
  "dependencies": {
    "connect": "*",
    "swig": "*"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:andrepadez/cssspitter.git"
  },
  "keywords": [
    "express",
    "connect",
    "css",
    "mobile",
    "ui",
    "percentage",
    "no-less"
  ],
  "license": "MIT",
  "readme": "Normalizer\n========\n\nTemplating engine for CSS based on width and height of the window, used as a Connect/Express Middleware.\nRelies on Swig, which is my templating engine of choice.  \nI created this package to help me with a very specific need: when building apps for mobile i always have problems with my lack of ability with CSS so this allows me to build a UI based on percentages of the window's dimension.  \nIt's in a very early stage but it works as it should; take a look at the roadmap to check on the functionalities i'm working on.\n\n<h3>you should use it because:</h3>\n<ul>\n    <li>You find it useful</li>\n    <li>you need to build a UI that is proportionate wherever the device it is opened</li>\n    <li>Simple to use</li>\n    <li>Little or no overhead</li>\n</ul>\n\n<h3>you should look away if:</h3>\n<ul>\n    <li>you think it's stupid</li>\n    <li>you're a guru with CSS and think this is stupid</li>\n    <li>potato</li>\n</ul>\n\nUsage\n-----\n\nInstall it with:\n\t\n\tnpm install cssspitter\n\nOr include it in the package.json file:\n\t\n\t{\n\t\t......,\n\t\t\"dependencies\": {\n\t\t\t....,\n\t\t\t\"cssspitter\": \"*\"\n\t\t}\n\t}\n\nAs always you have to require it:\n\n    var cssspitter = require('cssspitter');\n\nWhen configuring the Connect/Express server, include it like this:  \n\t- replace the path with the folder you have the templates)  \n\t- it's important to include it after the static middleware, for in the near future i will be implementing a caching service\n\n    app.configure(function(){\n    \t.....\n    \t.....\n    \tapp.use(express.static(path.join(__dirname, 'public')));\n  \t\tapp.use( cssspitter( path.join(__dirname, 'public/css/templates/' ) ) );\n    });\n    \nThe structure of the requests should be:\n\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/_width_/_height_/_nameoffile_.css\">\n\nSo what i do is something like:  \n\t- I will create a mechanism to serve bundles but for now, you have to request every file\n\n\t<script>\n\t\tvar w = window.innerWidth,\n\t\t    h = window.innerHeight;\n\t    document.write(\n\t\t\t[\n\t\t\t\t'<link rel=\"stylesheet\" href=\"/css/'+w+'/'+h+'/navigation.css\">', \n\t\t\t\t'<link rel=\"stylesheet\" href=\"/css/'+w+'/'+h+'/homeview.css\">'\n\t\t\t].join('\\n')\n\t\t);\n\t</script>\n    \nThen, in the CSS template, use 'w' and 'h' at will:\n    \n    html, body {\n    \twidth: {{w}}px;\n    \theight: {{h}}px;\n    }\n    .header {\n    \twidth: {{w}}px;\n    \theight: {{h * 0.10}}px; /* 10% */\n    }\n\nEasy isn't it?  \nYou can also use all the functionality of Swig to pump up the jam...\n\nRoad Map\n-----\n\n* caching system that will save the files already requested\n* bundling mechanism to join all the files into one response\n* minimizing option\n\nFeel free to use, fork and please contribute reporting bugs and with pull requests",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/andrepadez/cssspitter/issues"
  },
  "_id": "cssspitter@0.1.1",
  "_from": "cssspitter@*"
}
